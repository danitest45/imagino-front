'use client';

import { useEffect, useState } from 'react';
import ImageCard from '../components/ImageCard';
import ImageCardModal from '../components/ImageCardModal';
import { getLatestJobs } from '../lib/api';
import type { LatestJob } from '../types/image-job';

export default function Home() {
  const [jobs, setJobs] = useState<LatestJob[]>([]);
  const [loading, setLoading] = useState(true);
  const [modalOpen, setModalOpen] = useState(false);
  const [selected, setSelected] = useState<{ id: string; url: string } | null>(null);

  useEffect(() => {
    let ignore = false;
    (async () => {
      try {
        const latest = await getLatestJobs();
        if (!ignore) setJobs(latest.filter(j => j.imageUrl));
      } catch {
        if (!ignore) setJobs([]);
      } finally {
        if (!ignore) setLoading(false);
      }
    })();
    return () => {
      ignore = true;
    };
  }, []);

  return (
    <main className="min-h-screen max-w-7xl mx-auto px-4">
      <section className="text-center py-20">
        <h1 className="text-5xl sm:text-6xl font-extrabold tracking-tight bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-500 text-transparent bg-clip-text animate-fade-in">
          Discover amazing creations
        </h1>
        <p className="mt-4 text-lg text-gray-400 animate-fade-in">
          Gallery of images generated by the Imagino.AI community
        </p>
      </section>

      <div className="columns-2 sm:columns-3 md:columns-4 gap-4 [column-fill:_balance]">
        {loading
          ? Array.from({ length: 12 }).map((_, i) => (
              <div key={`placeholder-${i}`} className="mb-4 break-inside-avoid">
                <ImageCard loading onClick={() => {}} />
              </div>
            ))
          : jobs.map(job => (
                <div key={job.id} className="mb-4 break-inside-avoid">
                  <ImageCard
                    src={job.imageUrl}
                    jobId={job.id}
                    onClick={() => {
                      setSelected({ id: job.id, url: job.imageUrl });
                      setModalOpen(true);
                    }}
                  />
                </div>
            ))}
      </div>

      <ImageCardModal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        jobId={selected?.id ?? null}
        fallbackUrl={selected?.url}
      />
    </main>
  );
}
